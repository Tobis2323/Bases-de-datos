<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="originalContent" value="import java.util.Scanner;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        menu(scanner);&#10;        scanner.close();&#10;    }&#10;&#10;    private static void menu(Scanner scanner) {&#10;        while (true) {&#10;            System.out.println();&#10;            System.out.println(&quot;Seleccione una opción:&quot;);&#10;            System.out.println(&quot;1 - Es múltiplo&quot;);&#10;            System.out.println(&quot;2 - (pendiente)&quot;);&#10;            System.out.println(&quot;3 - (pendiente)&quot;);&#10;            System.out.println(&quot;4 - (pendiente)&quot;);&#10;            System.out.println(&quot;5 - (pendiente)&quot;);&#10;            System.out.println(&quot;0 - Salir&quot;);&#10;            System.out.print(&quot;Opción: &quot;);&#10;&#10;            int opcion;&#10;            try {&#10;                opcion = scanner.nextInt();&#10;            } catch (java.util.InputMismatchException e) {&#10;                System.out.println(&quot;Entrada no válida. Por favor ingrese un número.&quot;);&#10;                scanner.next(); // consumir token erróneo&#10;                continue;&#10;            }&#10;&#10;            switch (opcion) {&#10;                case 1:&#10;                    option1(scanner);&#10;                    break;&#10;&#10;                case 2:&#10;                    option2(scanner);&#10;                    break;&#10;                case 3:&#10;                    option3(scanner);&#10;                    break;&#10;                case 4:&#10;                    option4(scanner);&#10;                    break;&#10;                case 5:&#10;                    option5(scanner);&#10;                    break;&#10;&#10;                case 0:&#10;                    System.out.println(&quot;Saliendo...&quot;);&#10;                    return;&#10;&#10;                default:&#10;                    System.out.println(&quot;Opción no válida.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Maneja la opción 1: lee entrada y usa la función auxiliar para determinar si es múltiplo&#10;    private static void option1(Scanner scanner) {&#10;        System.out.print(&quot;Ingrese un número: &quot;);&#10;        int n = scanner.nextInt();&#10;        System.out.print(&quot;Ingrese el múltiplo: &quot;);&#10;        int mul = scanner.nextInt();&#10;&#10;        if (mul == 0) {&#10;            System.out.println(&quot;El múltiplo no puede ser 0. Operación cancelada.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (isMultipleOf(mul, n)) {&#10;            System.out.println(&quot;El número es múltiplo.&quot;);&#10;        } else {&#10;            System.out.println(&quot;El número no es múltiplo.&quot;);&#10;        }&#10;    }&#10;&#10;    private static void option2(Scanner scanner) {&#10;        System.out.println(&quot;Opción 2 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option3(Scanner scanner) {&#10;        System.out.println(&quot;Opción 3 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option4(Scanner scanner) {&#10;        System.out.println(&quot;Opción 4 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option5(Scanner scanner) {&#10;        System.out.println(&quot;Opción 5 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    // Función auxiliar que devuelve true si n es múltiplo de mul&#10;    private static boolean isMultipleOf(int mul, int n) {&#10;        if (mul == 0) {&#10;            return false; // protección adicional aunque el llamador ya lo valida&#10;        }&#10;        return n % mul == 0;&#10;    }&#10;}" />
              <option name="updatedContent" value="import java.util.Scanner;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;        menu(scanner);&#10;        scanner.close();&#10;    }&#10;&#10;    private static void menu(Scanner scanner) {&#10;        while (true) {&#10;            System.out.println();&#10;            System.out.println(&quot;Seleccione una opción:&quot;);&#10;            System.out.println(&quot;1 - Es múltiplo&quot;);&#10;            System.out.println(&quot;2 - (pendiente)&quot;);&#10;            System.out.println(&quot;3 - (pendiente)&quot;);&#10;            System.out.println(&quot;4 - (pendiente)&quot;);&#10;            System.out.println(&quot;5 - (pendiente)&quot;);&#10;            System.out.println(&quot;0 - Salir&quot;);&#10;            System.out.print(&quot;Opción: &quot;);&#10;&#10;            int opcion;&#10;            try {&#10;                opcion = scanner.nextInt();&#10;            } catch (java.util.InputMismatchException e) {&#10;                System.out.println(&quot;Entrada no válida. Por favor ingrese un número.&quot;);&#10;                scanner.next(); // consumir token erróneo&#10;                continue;&#10;            }&#10;&#10;            switch (opcion) {&#10;                case 1:&#10;                    option1(scanner);&#10;                    break;&#10;&#10;                case 2:&#10;                    option2(scanner);&#10;                    break;&#10;                case 3:&#10;                    option3(scanner);&#10;                    break;&#10;                case 4:&#10;                    option4(scanner);&#10;                    break;&#10;                case 5:&#10;                    option5(scanner);&#10;                    break;&#10;&#10;                case 0:&#10;                    System.out.println(&quot;Saliendo...&quot;);&#10;                    return;&#10;&#10;                default:&#10;                    System.out.println(&quot;Opción no válida.&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    // Maneja la opción 1: lee entrada y usa la función auxiliar para determinar si es múltiplo&#10;    private static void option1(Scanner scanner) {&#10;        System.out.print(&quot;Ingrese un número: &quot;);&#10;        int n = scanner.nextInt();&#10;        System.out.print(&quot;Ingrese el múltiplo: &quot;);&#10;        int mul = scanner.nextInt();&#10;&#10;        if (mul == 0) {&#10;            System.out.println(&quot;El múltiplo no puede ser 0. Operación cancelada.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (isMultipleOf(mul, n)) {&#10;            System.out.println(&quot;El número es múltiplo.&quot;);&#10;        } else {&#10;            System.out.println(&quot;El número no es múltiplo.&quot;);&#10;        }&#10;    }&#10;&#10;    private static void option2(Scanner scanner) {&#10;        System.out.println(&quot;Opción 2 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option3(Scanner scanner) {&#10;        System.out.println(&quot;Opción 3 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option4(Scanner scanner) {&#10;        System.out.println(&quot;Opción 4 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    private static void option5(Scanner scanner) {&#10;        System.out.println(&quot;Opción 5 pendiente de implementar.&quot;);&#10;    }&#10;&#10;    // Función auxiliar que devuelve true si n es múltiplo de mul&#10;    private static boolean isMultipleOf(int mul, int n) {&#10;        if (mul == 0) {&#10;            return false; // protección adicional aunque el llamador ya lo valida&#10;        }&#10;        return n % mul == 0;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>