<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/App.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/App.java" />
              <option name="originalContent" value="package miContenido;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import miContenido.Service.LegoSetService;&#10;import miContenido.Service.ThemeService;&#10;import miContenido.Service.AgeGroupService;&#10;import miContenido.model.LegoSet;&#10;import miContenido.model.AgeGroup;&#10;import miContenido.model.CountryCostRating;&#10;import miContenido.util.CsvParser;&#10;import miContenido.util.LocalEntityManagerProvider;&#10;&#10;import java.net.URISyntaxException;&#10;import java.net.URL;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class App {&#10;    public static void main(String[] args) throws URISyntaxException {&#10;        // 1️⃣ Obtener EntityManager&#10;        EntityManager em = LocalEntityManagerProvider.getEntityManager();&#10;        System.out.println(&quot;✅ Conexión establecida correctamente.&quot;);&#10;&#10;        // Localizar CSV en el classpath&#10;        URL fileUrl = App.class.getResource(&quot;/sql/lego_sets_data.csv&quot;);&#10;        if (fileUrl == null) {&#10;            System.err.println(&quot;No se encontró lego_sets_data.csv en resources/sql&quot;);&#10;            em.close();&#10;            LocalEntityManagerProvider.close();&#10;            return;&#10;        }&#10;        Path path = Paths.get(fileUrl.toURI());&#10;&#10;        // Servicios&#10;        LegoSetService legoSetService = new LegoSetService();&#10;        ThemeService themeService = new ThemeService();&#10;        AgeGroupService ageGroupService = new AgeGroupService();&#10;&#10;        // Importar desde CSV&#10;        CsvParser parser = new CsvParser();&#10;        List&lt;LegoSet&gt; aInsertar = parser.parsearLegoSets(path);&#10;        legoSetService.agregarArrayList(aInsertar);&#10;        System.out.println(&quot;✅ CSV leido correctamente.&quot;);&#10;&#10;        // Consultas simples sobre la BD&#10;        List&lt;LegoSet&gt; sets = legoSetService.getAllLegoSets();&#10;        List&lt;AgeGroup&gt; ageGroups = ageGroupService.getAllAgeGroups();&#10;        int cantTematicas = themeService.getAllThemes().size();&#10;&#10;        // Salida simple requerida&#10;        System.out.println(&quot;\n=== Resultado de la importación ===&quot;);&#10;        System.out.println(&quot;Importación finalizada usando JPA desde lego_sets_data.csv.&quot;);&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Sets en la base de datos ===&quot;);&#10;        System.out.println(sets.size());&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Rangos de edad distintos ===&quot;);&#10;        System.out.print(ageGroups.size() + &quot; rangos&quot;);&#10;        // Mostrar los códigos de rango de forma simple, separados por coma&#10;        if (!ageGroups.isEmpty()) {&#10;            String codigos = ageGroups.stream()&#10;                    .map(AgeGroup::getCode)&#10;                    .distinct()&#10;                    .collect(Collectors.joining(&quot;, &quot;));&#10;            System.out.println(&quot;: &quot; + codigos);&#10;        } else {&#10;            System.out.println();&#10;        }&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Temáticas distintas ===&quot;);&#10;        System.out.println(cantTematicas);&#10;&#10;        // Ranking de los 5 países con menor costo/valoración promedio&#10;        List&lt;CountryCostRating&gt; top5 = legoSetService.findTopCountriesByAvgCostPerStar(5);&#10;        System.out.println(&quot;\n=== Ranking de los 5 Países con la relación costo/valoración más baja ===&quot;);&#10;        if (top5.isEmpty()) {&#10;            System.out.println(&quot;(No hay sets disponibles por país)&quot;);&#10;        } else {&#10;            int rank = 1;&#10;            for (CountryCostRating r : top5) {&#10;                // Formateo a 2 decimales&#10;                String avg = String.format(&quot;%.2f&quot;, r.getAvgCostPerStar());&#10;                System.out.println(&quot;#&quot; + rank + &quot; &quot; + r.getCode() + &quot; &quot; + r.getName() + &quot; -&gt; $&quot; + avg + &quot;/estrella&quot;);&#10;                rank++;&#10;            }&#10;        }&#10;&#10;        em.close();&#10;        LocalEntityManagerProvider.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import miContenido.Service.LegoSetService;&#10;import miContenido.Service.ThemeService;&#10;import miContenido.Service.AgeGroupService;&#10;import miContenido.model.LegoSet;&#10;import miContenido.model.AgeGroup;&#10;import miContenido.model.CountryCostRating;&#10;import miContenido.util.CsvParser;&#10;import miContenido.util.LocalEntityManagerProvider;&#10;&#10;import java.net.URISyntaxException;&#10;import java.net.URL;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class App {&#10;    public static void main(String[] args) throws URISyntaxException {&#10;        // 1️⃣ Obtener EntityManager&#10;        EntityManager em = LocalEntityManagerProvider.getEntityManager();&#10;        System.out.println(&quot;✅ Conexión establecida correctamente.&quot;);&#10;&#10;        // Localizar CSV en el classpath&#10;        URL fileUrl = App.class.getResource(&quot;/sql/lego_sets_data.csv&quot;);&#10;        if (fileUrl == null) {&#10;            System.err.println(&quot;No se encontró lego_sets_data.csv en resources/sql&quot;);&#10;            em.close();&#10;            LocalEntityManagerProvider.close();&#10;            return;&#10;        }&#10;        Path path = Paths.get(fileUrl.toURI());&#10;&#10;        // Servicios&#10;        LegoSetService legoSetService = new LegoSetService();&#10;        ThemeService themeService = new ThemeService();&#10;        AgeGroupService ageGroupService = new AgeGroupService();&#10;&#10;        // Importar desde CSV&#10;        CsvParser parser = new CsvParser();&#10;        List&lt;LegoSet&gt; aInsertar = parser.parsearLegoSets(path);&#10;        legoSetService.agregarArrayList(aInsertar);&#10;        System.out.println(&quot;✅ CSV leido correctamente.&quot;);&#10;&#10;        // Consultas simples sobre la BD&#10;        List&lt;LegoSet&gt; sets = legoSetService.getAllLegoSets();&#10;        List&lt;AgeGroup&gt; ageGroups = ageGroupService.getAllAgeGroups();&#10;        int cantTematicas = themeService.getAllThemes().size();&#10;&#10;        // Salida simple requerida&#10;        System.out.println(&quot;\n=== Resultado de la importación ===&quot;);&#10;        System.out.println(&quot;Importación finalizada usando JPA desde lego_sets_data.csv.&quot;);&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Sets en la base de datos ===&quot;);&#10;        System.out.println(sets.size());&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Rangos de edad distintos ===&quot;);&#10;        System.out.print(ageGroups.size() + &quot; rangos&quot;);&#10;        // Mostrar los códigos de rango de forma simple, separados por coma&#10;        if (!ageGroups.isEmpty()) {&#10;            String codigos = ageGroups.stream()&#10;                    .map(AgeGroup::getCode)&#10;                    .distinct()&#10;                    .collect(Collectors.joining(&quot;, &quot;));&#10;            System.out.println(&quot;: &quot; + codigos);&#10;        } else {&#10;            System.out.println();&#10;        }&#10;&#10;        System.out.println(&quot;\n=== Cantidad de Temáticas distintas ===&quot;);&#10;        System.out.println(cantTematicas);&#10;&#10;        // Ranking de los 5 países con menor costo/valoración promedio&#10;        List&lt;CountryCostRating&gt; top5 = legoSetService.findTopCountriesByAvgCostPerStar(5);&#10;        System.out.println(&quot;\n=== Ranking de los 5 Países con la relación costo/valoración más baja ===&quot;);&#10;        if (top5.isEmpty()) {&#10;            System.out.println(&quot;(No hay sets disponibles por país)&quot;);&#10;        } else {&#10;            int rank = 1;&#10;            for (CountryCostRating r : top5) {&#10;                // Formateo a 2 decimales&#10;                String avg = String.format(&quot;%.2f&quot;, r.getAvgCostPerStar());&#10;                System.out.println(&quot;#&quot; + rank + &quot; &quot; + r.getCode() + &quot; &quot; + r.getName() + &quot; -&gt; $&quot; + avg + &quot;/estrella&quot;);&#10;                rank++;&#10;            }&#10;        }&#10;&#10;        em.close();&#10;        LocalEntityManagerProvider.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Repository/BaseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Repository/BaseRepository.java" />
              <option name="originalContent" value="package miContenido.Repository;&#10;&#10;import jakarta.persistence.EntityManager;&#10;&#10;import java.util.List;&#10;&#10;public abstract class BaseRepository&lt;T, ID&gt; {&#10;    protected EntityManager em;&#10;    protected Class&lt;T&gt; entityClass;&#10;&#10;    public BaseRepository(EntityManager em, Class&lt;T&gt; entityClass) {&#10;        this.em = em;&#10;        this.entityClass = entityClass;&#10;    }&#10;&#10;    public List&lt;T&gt; findAll(){&#10;        String jpql = &quot;select t from &quot;+entityClass.getSimpleName()+&quot; t &quot;;&#10;        return em.createQuery(jpql, entityClass).getResultList();&#10;    }&#10;&#10;    public T findById(ID id){&#10;        return em.find(entityClass, id);&#10;    }&#10;&#10;&#10;    // Usamos merge para save y update, ya que si el entity no tiene id, lo inserta, y si tiene id, lo actualiza&#10;    public T save(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            T managed = em.merge(entity);&#10;            em.getTransaction().commit();&#10;            return managed;&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void update(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            em.merge(entity);&#10;            em.getTransaction().commit();&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void delete(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            // asegurar que la entidad esté gestionada antes de borrar&#10;            em.remove(em.contains(entity) ? entity : em.merge(entity));&#10;            em.getTransaction().commit();&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Repository;&#13;&#10;&#13;&#10;import jakarta.persistence.EntityManager;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public abstract class BaseRepository&lt;T, ID&gt; {&#13;&#10;    protected EntityManager em;&#13;&#10;    protected Class&lt;T&gt; entityClass;&#13;&#10;&#13;&#10;    public BaseRepository(EntityManager em, Class&lt;T&gt; entityClass) {&#13;&#10;        this.em = em;&#13;&#10;        this.entityClass = entityClass;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;T&gt; findAll(){&#13;&#10;        String jpql = &quot;select t from &quot;+entityClass.getSimpleName()+&quot; t &quot;;&#13;&#10;        return em.createQuery(jpql, entityClass).getResultList();&#13;&#10;    }&#13;&#10;&#13;&#10;    public T findById(ID id){&#13;&#10;        return em.find(entityClass, id);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    // Usamos merge para save y update, ya que si el entity no tiene id, lo inserta, y si tiene id, lo actualiza&#13;&#10;    public T save(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            T managed = em.merge(entity);&#13;&#10;            em.getTransaction().commit();&#13;&#10;            return managed;&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void update(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            em.merge(entity);&#13;&#10;            em.getTransaction().commit();&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void delete(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            // asegurar que la entidad esté gestionada antes de borrar&#13;&#10;            em.remove(em.contains(entity) ? entity : em.merge(entity));&#13;&#10;            em.getTransaction().commit();&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/AgeGroupService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/AgeGroupService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.AgeGroupRepository;&#10;import miContenido.model.AgeGroup;&#10;&#10;public class AgeGroupService {&#10;    private final AgeGroupRepository ageGroupRepository;&#10;&#10;    public AgeGroupService() {&#10;        this.ageGroupRepository = new AgeGroupRepository();&#10;    }&#10;&#10;    public java.util.List&lt;miContenido.model.AgeGroup&gt; getAllAgeGroups() {&#10;        return ageGroupRepository.findAll();&#10;    }&#10;&#10;    public miContenido.model.AgeGroup getAgeGroupById(Integer id) {&#10;        return ageGroupRepository.findById(id);&#10;    }&#10;&#10;    public void saveAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.save(ageGroup);&#10;    }&#10;&#10;    public void updateAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.update(ageGroup);&#10;    }&#10;&#10;    public void deleteAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.delete(ageGroup);&#10;    }&#10;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#10;    public void agregarArrayList(java.util.List&lt;miContenido.model.AgeGroup&gt; ageGroups) {&#10;        for (miContenido.model.AgeGroup ageGroup : ageGroups) {&#10;            ageGroupRepository.save(ageGroup);&#10;        }&#10;    }&#10;&#10;    public AgeGroup findOrCreateByCode(String ageCode) {&#10;        // Buscar si existe un age group con ese código&#10;        java.util.List&lt;miContenido.model.AgeGroup&gt; existentes = ageGroupRepository.findAll();&#10;        for (miContenido.model.AgeGroup ageGroup : existentes) {&#10;            if (ageGroup.getCode().equalsIgnoreCase(ageCode)) {&#10;                return ageGroup;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo (recuperando el managed) y lo retorno&#10;        miContenido.model.AgeGroup nuevo = new miContenido.model.AgeGroup();&#10;        nuevo.setCode(ageCode);&#10;        return ageGroupRepository.save(nuevo);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Service;&#13;&#10;&#13;&#10;import miContenido.Repository.AgeGroupRepository;&#13;&#10;import miContenido.model.AgeGroup;&#13;&#10;&#13;&#10;public class AgeGroupService {&#13;&#10;    private final AgeGroupRepository ageGroupRepository;&#13;&#10;&#13;&#10;    public AgeGroupService() {&#13;&#10;        this.ageGroupRepository = new AgeGroupRepository();&#13;&#10;    }&#13;&#10;&#13;&#10;    public java.util.List&lt;miContenido.model.AgeGroup&gt; getAllAgeGroups() {&#13;&#10;        return ageGroupRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    public miContenido.model.AgeGroup getAgeGroupById(Integer id) {&#13;&#10;        return ageGroupRepository.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void saveAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.save(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.update(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.delete(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#13;&#10;    public void agregarArrayList(java.util.List&lt;miContenido.model.AgeGroup&gt; ageGroups) {&#13;&#10;        for (miContenido.model.AgeGroup ageGroup : ageGroups) {&#13;&#10;            ageGroupRepository.save(ageGroup);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public AgeGroup findOrCreateByCode(String ageCode) {&#13;&#10;        // Buscar si existe un age group con ese código&#13;&#10;        java.util.List&lt;miContenido.model.AgeGroup&gt; existentes = ageGroupRepository.findAll();&#13;&#10;        for (miContenido.model.AgeGroup ageGroup : existentes) {&#13;&#10;            if (ageGroup.getCode().equalsIgnoreCase(ageCode)) {&#13;&#10;                return ageGroup;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // Si no existe, lo creo, lo guardo (recuperando el managed) y lo retorno&#13;&#10;        miContenido.model.AgeGroup nuevo = new miContenido.model.AgeGroup();&#13;&#10;        nuevo.setCode(ageCode);&#13;&#10;        return ageGroupRepository.save(nuevo);&#13;&#10;    }&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/CountryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/CountryService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.model.Country;&#10;&#10;import java.util.List;&#10;&#10;public class CountryService {&#10;    private final CountryRepository countryRepository;&#10;    public CountryService() {&#10;        this.countryRepository = new CountryRepository();&#10;    }&#10;    public List&lt;Country&gt; getAllCountries() {&#10;        return countryRepository.findAll();&#10;    }&#10;    public Country getCountryById(Integer id) {&#10;        return countryRepository.findById(id);&#10;    }&#10;    public void saveCountry(Country country) {&#10;        countryRepository.save(country);&#10;    }&#10;    public void updateCountry(Country country) {&#10;        countryRepository.update(country);&#10;    }&#10;    public void deleteCountry(Country country) {&#10;        countryRepository.delete(country);&#10;    }&#10;&#10;    public Integer getThemeById(Integer id) {&#10;        Country country = countryRepository.findById(id);&#10;        return country != null ? country.getIdCountry() : null;&#10;    }&#10;&#10;&#10;    // ✅ NUEVO: buscar por código (COUNTRIES.CODE)&#10;    public Country getCountryByCode(String code) {&#10;        return countryRepository.findByCode(code);&#10;    }&#10;&#10;    // ✅ NUEVO: find-or-create por código (evita violar NOT NULL/UNIQUE de CODE)&#10;    public Country findOrCreateByCode(String code) {&#10;        Country existente = countryRepository.findByCode(code);&#10;        if (existente != null) return existente;&#10;        Country nuevo = new Country();&#10;        nuevo.setCode(code);&#10;        // Si no tenemos nombre disponible, guardamos el código como nombre temporalmente.&#10;        nuevo.setName(code);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;&#10;    // Método previo por nombre (se mantiene por compatibilidad)&#10;    public void agregarArrayList(List&lt;Country&gt; countries) {&#10;        for (Country country : countries) {&#10;            countryRepository.save(country);&#10;        }&#10;    }&#10;    public Country findOrCreateByName(String countryName) {&#10;        // Buscar si existe un country con ese nombre&#10;        List&lt;Country&gt; existentes = countryRepository.findAll();&#10;        for (Country country : existentes) {&#10;            if (country.getName().equalsIgnoreCase(countryName)) {&#10;                return country;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo y retorno la instancia gestionada&#10;        Country nuevo = new Country();&#10;        nuevo.setName(countryName);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.model.Country;&#10;&#10;import java.util.List;&#10;&#10;public class CountryService {&#10;    private final CountryRepository countryRepository;&#10;    public CountryService() {&#10;        this.countryRepository = new CountryRepository();&#10;    }&#10;    public List&lt;Country&gt; getAllCountries() {&#10;        return countryRepository.findAll();&#10;    }&#10;    public Country getCountryById(Integer id) {&#10;        return countryRepository.findById(id);&#10;    }&#10;    public void saveCountry(Country country) {&#10;        countryRepository.save(country);&#10;    }&#10;    public void updateCountry(Country country) {&#10;        countryRepository.update(country);&#10;    }&#10;    public void deleteCountry(Country country) {&#10;        countryRepository.delete(country);&#10;    }&#10;&#10;    public Integer getThemeById(Integer id) {&#10;        Country country = countryRepository.findById(id);&#10;        return country != null ? country.getIdCountry() : null;&#10;    }&#10;&#10;&#10;    // ✅ NUEVO: buscar por código (COUNTRIES.CODE)&#10;    public Country getCountryByCode(String code) {&#10;        return countryRepository.findByCode(code);&#10;    }&#10;&#10;    // ✅ NUEVO: find-or-create por código (evita violar NOT NULL/UNIQUE de CODE)&#10;    public Country findOrCreateByCode(String code) {&#10;        Country existente = countryRepository.findByCode(code);&#10;        if (existente != null) return existente;&#10;        Country nuevo = new Country();&#10;        nuevo.setCode(code);&#10;        // Si no tenemos nombre disponible, guardamos el código como nombre temporalmente.&#10;        nuevo.setName(code);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;&#10;    // Método previo por nombre (se mantiene por compatibilidad)&#10;    public void agregarArrayList(List&lt;Country&gt; countries) {&#10;        for (Country country : countries) {&#10;            countryRepository.save(country);&#10;        }&#10;    }&#10;    public Country findOrCreateByName(String countryName) {&#10;        // Buscar si existe un country con ese nombre&#10;        List&lt;Country&gt; existentes = countryRepository.findAll();&#10;        for (Country country : existentes) {&#10;            if (country.getName().equalsIgnoreCase(countryName)) {&#10;                return country;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo y retorno la instancia gestionada&#10;        Country nuevo = new Country();&#10;        nuevo.setName(countryName);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/ThemeService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/ThemeService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.ThemeRepository;&#10;import miContenido.model.Theme;&#10;import java.util.List;&#10;&#10;public class ThemeService {&#10;    private final ThemeRepository themeRepository;&#10;&#10;    public ThemeService() {&#10;        this.themeRepository = new ThemeRepository();&#10;    }&#10;&#10;    public List&lt;Theme&gt; getAllThemes() {&#10;        return themeRepository.findAll();&#10;    }&#10;&#10;    public Theme getThemeById(Integer id) {&#10;        return themeRepository.findById(id);&#10;    }&#10;&#10;    public void saveTheme(Theme theme) {&#10;        themeRepository.save(theme);&#10;    }&#10;&#10;    public void updateTheme(Theme theme) {&#10;        themeRepository.update(theme);&#10;    }&#10;&#10;    public void deleteTheme(Theme theme) {&#10;        themeRepository.delete(theme);&#10;    }&#10;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#10;    public void agregarArrayList(List&lt;Theme&gt; themes) {&#10;        for (Theme theme : themes) {&#10;            themeRepository.save(theme);&#10;        }&#10;    }&#10;&#10;    public Theme findOrCreateByName(String themeName) {&#10;        // Buscar si existe un theme con ese nombre&#10;        List&lt;Theme&gt; existentes = themeRepository.findAll();&#10;        for (Theme theme : existentes) {&#10;            if (theme.getName().equalsIgnoreCase(themeName)) {&#10;                return theme;&#10;            }&#10;        }&#10;        // Si no existe, lo creo y retorno la entidad gestionada por merge (con ID)&#10;        Theme nuevo = new Theme();&#10;        nuevo.setName(themeName);&#10;        return themeRepository.save(nuevo);&#10;    }&#10;}" />
              <option name="updatedContent" value="package miContenido.Service;&#13;&#10;&#13;&#10;import miContenido.Repository.ThemeRepository;&#13;&#10;import miContenido.model.Theme;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class ThemeService {&#13;&#10;    private final ThemeRepository themeRepository;&#13;&#10;&#13;&#10;    public ThemeService() {&#13;&#10;        this.themeRepository = new ThemeRepository();&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Theme&gt; getAllThemes() {&#13;&#10;        return themeRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    public Theme getThemeById(Integer id) {&#13;&#10;        return themeRepository.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void saveTheme(Theme theme) {&#13;&#10;        themeRepository.save(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateTheme(Theme theme) {&#13;&#10;        themeRepository.update(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteTheme(Theme theme) {&#13;&#10;        themeRepository.delete(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#13;&#10;    public void agregarArrayList(List&lt;Theme&gt; themes) {&#13;&#10;        for (Theme theme : themes) {&#13;&#10;            themeRepository.save(theme);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Theme findOrCreateByName(String themeName) {&#13;&#10;        // Buscar si existe un theme con ese nombre&#13;&#10;        List&lt;Theme&gt; existentes = themeRepository.findAll();&#13;&#10;        for (Theme theme : existentes) {&#13;&#10;            if (theme.getName().equalsIgnoreCase(themeName)) {&#13;&#10;                return theme;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // Si no existe, lo creo y retorno la entidad gestionada por merge (con ID)&#13;&#10;        Theme nuevo = new Theme();&#13;&#10;        nuevo.setName(themeName);&#13;&#10;        return themeRepository.save(nuevo);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/model/LegoSet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/model/LegoSet.java" />
              <option name="originalContent" value="package miContenido.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.math.BigDecimal;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@Table(name = &quot;LEGO_SETS&quot;)&#10;public class LegoSet {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;lego_set_seq&quot;)&#10;    @SequenceGenerator(name = &quot;lego_set_seq&quot;, sequenceName = &quot;SEQ_LEGO_SET_ID&quot;, allocationSize = 1)&#10;    @Column(name = &quot;ID_SET&quot;)&#10;    private Integer idSet;&#10;&#10;    @Column(name = &quot;PROD_ID&quot;, nullable = false)&#10;    private Integer prodId;&#10;&#10;    @Column(name = &quot;SET_NAME&quot;, nullable = false, length = 200)&#10;    private String setName;&#10;&#10;    @Column(name = &quot;PROD_DESC&quot;, length = 2048)&#10;    private String prodDesc;&#10;&#10;    @Column(name = &quot;REVIEW_DIFFICULTY&quot;, length = 32)&#10;    private String reviewDifficulty;&#10;&#10;    @Column(name = &quot;PIECE_COUNT&quot;)&#10;    private Integer pieceCount;&#10;&#10;    @Column(name = &quot;STAR_RATING&quot;, precision = 3, scale = 1)&#10;    private BigDecimal starRating;&#10;&#10;    @Column(name = &quot;LIST_PRICE&quot;, precision = 10, scale = 2)&#10;    private BigDecimal listPrice;&#10;&#10;    @Column(name = &quot;NUM_REVIEWS&quot;)&#10;    private Integer numReviews;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;THEME_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Theme theme;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;AGE_GROUP_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private AgeGroup ageGroup;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;COUNTRY_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Country country;&#10;&#10;&#10;&#10;    // Getters and setters...&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.math.BigDecimal;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@Table(name = &quot;LEGO_SETS&quot;)&#10;public class LegoSet {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;lego_set_seq&quot;)&#10;    @SequenceGenerator(name = &quot;lego_set_seq&quot;, sequenceName = &quot;SEQ_LEGO_SET_ID&quot;, allocationSize = 1)&#10;    @Column(name = &quot;ID_SET&quot;)&#10;    private Integer idSet;&#10;&#10;    @Column(name = &quot;PROD_ID&quot;, nullable = false)&#10;    private Integer prodId;&#10;&#10;    @Column(name = &quot;SET_NAME&quot;, nullable = false, length = 200)&#10;    private String setName;&#10;&#10;    @Column(name = &quot;PROD_DESC&quot;, length = 2048)&#10;    private String prodDesc;&#10;&#10;    @Column(name = &quot;REVIEW_DIFFICULTY&quot;, length = 32)&#10;    private String reviewDifficulty;&#10;&#10;    @Column(name = &quot;PIECE_COUNT&quot;)&#10;    private Integer pieceCount;&#10;&#10;    @Column(name = &quot;STAR_RATING&quot;, precision = 3, scale = 1)&#10;    private BigDecimal starRating;&#10;&#10;    @Column(name = &quot;LIST_PRICE&quot;, precision = 10, scale = 2)&#10;    private BigDecimal listPrice;&#10;&#10;    @Column(name = &quot;NUM_REVIEWS&quot;)&#10;    private Integer numReviews;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;THEME_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Theme theme;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;AGE_GROUP_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private AgeGroup ageGroup;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;COUNTRY_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Country country;&#10;&#10;&#10;&#10;    // Getters and setters...&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/sql/ddl.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/sql/ddl.sql" />
              <option name="originalContent" value="-- =====================================================================&#10;-- LEGO - Normalization of THEME, AGE and COUNTRY&#10;-- Base: PUBLIC.LEGO_SETS (flattened dataset)&#10;-- Engine: H2 2.x&#10;-- =====================================================================&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Cleanup (idempotent)&#10;-- ---------------------------------------------------------------------&#10;DROP TABLE IF EXISTS LEGO_SETS;&#10;DROP TABLE IF EXISTS THEMES;&#10;DROP TABLE IF EXISTS AGE_GROUPS;&#10;DROP TABLE IF EXISTS COUNTRIES;&#10;&#10;DROP SEQUENCE IF EXISTS SEQ_LEGO_SET_ID;&#10;DROP SEQUENCE IF EXISTS SEQ_THEME_ID;&#10;DROP SEQUENCE IF EXISTS SEQ_AGE_GROUP_ID;&#10;DROP SEQUENCE IF EXISTS SEQ_COUNTRY_ID;&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Sequences (auto-increment strategy)&#10;-- ---------------------------------------------------------------------&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_LEGO_SET_ID   START WITH 1 INCREMENT BY 1;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_THEME_ID      START WITH 1 INCREMENT BY 1;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_AGE_GROUP_ID  START WITH 1 INCREMENT BY 1;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_COUNTRY_ID    START WITH 1 INCREMENT BY 1;&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Table: COUNTRIES&#10;-- ID_COUNTRY (PK), CODE (indexed + unique), NAME&#10;-- ---------------------------------------------------------------------&#10;CREATE TABLE COUNTRIES (&#10;                           ID_COUNTRY  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_COUNTRY_ID,&#10;                           CODE        VARCHAR(3)   NOT NULL,&#10;                           NAME        VARCHAR(100) NOT NULL,&#10;                           CONSTRAINT PK_COUNTRIES PRIMARY KEY (ID_COUNTRY),&#10;                           CONSTRAINT UK_COUNTRIES_CODE UNIQUE (CODE)&#10;);&#10;&#10;-- Seed countries&#10;INSERT INTO COUNTRIES (CODE, NAME) VALUES&#10;                                       ('AT','Austria'),&#10;                                       ('AU','Australia'),&#10;                                       ('BE','Belgium'),&#10;                                       ('CA','Canada'),&#10;                                       ('CH','Switzerland'),&#10;                                       ('CZ','Czech Republic'),&#10;                                       ('DE','Germany'),&#10;                                       ('DN','Denmark'),&#10;                                       ('ES','Spain'),&#10;                                       ('FI','Finland'),&#10;                                       ('FR','France'),&#10;                                       ('GB','United Kingdom'),&#10;                                       ('IE','Ireland'),&#10;                                       ('IT','Italy'),&#10;                                       ('LU','Luxembourg'),&#10;                                       ('NL','Netherlands'),&#10;                                       ('NO','Norway'),&#10;                                       ('NZ','New Zealand'),&#10;                                       ('PL','Poland'),&#10;                                       ('PT','Portugal'),&#10;                                       ('US','United States');&#10;&#10;-- Required index by CODE&#10;CREATE INDEX IF NOT EXISTS IX_COUNTRIES_CODE ON COUNTRIES (CODE);&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Table: THEMES (catalog of themes)&#10;-- ---------------------------------------------------------------------&#10;CREATE TABLE THEMES (&#10;                        ID_THEME  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_THEME_ID,&#10;                        NAME      VARCHAR(120) NOT NULL,&#10;                        CONSTRAINT PK_THEMES PRIMARY KEY (ID_THEME),&#10;                        CONSTRAINT UK_THEMES_NAME UNIQUE (NAME)&#10;);&#10;&#10;-- Seed themes&#10;INSERT INTO THEMES (NAME) VALUES&#10;                              ('Star Wars'),&#10;                              ('City'),&#10;                              ('Technic'),&#10;                              ('Friends'),&#10;                              ('Ninjago'),&#10;                              ('Harry Potter');&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Table: AGE_GROUPS (catalog of age ranges)&#10;-- CODE = dataset literal (e.g., '6-12', '12')&#10;-- ---------------------------------------------------------------------&#10;CREATE TABLE AGE_GROUPS (&#10;                            ID_AGE_GROUP  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_AGE_GROUP_ID,&#10;                            CODE          VARCHAR(16)  NOT NULL,&#10;                            CONSTRAINT PK_AGE_GROUP PRIMARY KEY (ID_AGE_GROUP),&#10;                            CONSTRAINT UK_AGE_GROUP_CODE UNIQUE (CODE)&#10;);&#10;&#10;-- Seed age groups&#10;INSERT INTO AGE_GROUPS (CODE) VALUES&#10;                                  ('6-12'),&#10;                                  ('12+'),&#10;                                  ('5-8'),&#10;                                  ('8-14');&#10;&#10;-- ---------------------------------------------------------------------&#10;-- Table: LEGO_SETS (normalized destination)&#10;-- * Surrogate PK ID_SET&#10;-- * FKs to THEMES, AGE_GROUPS, COUNTRIES&#10;-- ---------------------------------------------------------------------&#10;CREATE TABLE LEGO_SETS (&#10;                           ID_SET            INTEGER       NOT NULL DEFAULT NEXT VALUE FOR SEQ_LEGO_SET_ID,&#10;                           PROD_ID           INTEGER       NOT NULL,&#10;                           SET_NAME          VARCHAR(200)  NOT NULL,&#10;                           PROD_DESC         VARCHAR(2048),&#10;                           REVIEW_DIFFICULTY VARCHAR(32),&#10;                           PIECE_COUNT       INTEGER,&#10;                           STAR_RATING       DECIMAL(3,1),&#10;                           LIST_PRICE        DECIMAL(10,2),&#10;                           NUM_REVIEWS       INTEGER,&#10;                           THEME_ID          INTEGER       NOT NULL,&#10;                           AGE_GROUP_ID      INTEGER       NOT NULL,&#10;                           COUNTRY_ID        INTEGER       NOT NULL,&#10;                           CONSTRAINT PK_LEGO_SET PRIMARY KEY (ID_SET),&#10;                           CONSTRAINT CK_STAR_RATING CHECK (STAR_RATING IS NULL OR (STAR_RATING &gt;= 0 AND STAR_RATING &lt;= 5)),&#10;                           CONSTRAINT FK_LEGOSET_THEME     FOREIGN KEY (THEME_ID)     REFERENCES THEMES(ID_THEME),&#10;                           CONSTRAINT FK_LEGOSET_AGEGROUP  FOREIGN KEY (AGE_GROUP_ID) REFERENCES AGE_GROUPS(ID_AGE_GROUP),&#10;                           CONSTRAINT FK_LEGOSET_COUNTRY   FOREIGN KEY (COUNTRY_ID)   REFERENCES COUNTRIES(ID_COUNTRY)&#10;);&#10;&#10;-- Suggested indexes for queries&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_THEME    ON LEGO_SETS (THEME_ID);&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_AGEGROUP ON LEGO_SETS (AGE_GROUP_ID);&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_COUNTRY  ON LEGO_SETS (COUNTRY_ID);&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_PRICE    ON LEGO_SETS (LIST_PRICE);&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_PIECES   ON LEGO_SETS (PIECE_COUNT);&#10;&#10;-- Ejemplo: seed data para LEGO_SETS&#10;INSERT INTO LEGO_SETS (&#10;    PROD_ID, SET_NAME, PROD_DESC, REVIEW_DIFFICULTY, PIECE_COUNT, STAR_RATING, LIST_PRICE, THEME_ID, AGE_GROUP_ID, COUNTRY_ID&#10;) VALUES&#10;      (10001, 'Millennium Falcon', 'Star Wars spaceship', 'Medium', 1345, 4.8, 149.99, 1, 1, 1),&#10;      (10002, 'City Police Station', 'City theme police station', 'Easy', 742, 4.2, 79.99, 2, 3, 2),&#10;      (10003, 'Technic Bugatti', 'Technic supercar', 'Hard', 3599, 4.9, 349.99, 3, 2, 3);&#10;&#10;-- =====================================================================&#10;-- End of DDL&#10;-- =====================================================================" />
              <option name="updatedContent" value="-- =====================================================================&#13;&#10;-- LEGO - Normalization of THEME, AGE and COUNTRY&#13;&#10;-- Base: PUBLIC.LEGO_SETS (flattened dataset)&#13;&#10;-- Engine: H2 2.x&#13;&#10;-- =====================================================================&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Cleanup (idempotent)&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;DROP TABLE IF EXISTS LEGO_SETS;&#13;&#10;DROP TABLE IF EXISTS THEMES;&#13;&#10;DROP TABLE IF EXISTS AGE_GROUPS;&#13;&#10;DROP TABLE IF EXISTS COUNTRIES;&#13;&#10;&#13;&#10;DROP SEQUENCE IF EXISTS SEQ_LEGO_SET_ID;&#13;&#10;DROP SEQUENCE IF EXISTS SEQ_THEME_ID;&#13;&#10;DROP SEQUENCE IF EXISTS SEQ_AGE_GROUP_ID;&#13;&#10;DROP SEQUENCE IF EXISTS SEQ_COUNTRY_ID;&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Sequences (auto-increment strategy)&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_LEGO_SET_ID   START WITH 1 INCREMENT BY 1;&#13;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_THEME_ID      START WITH 1 INCREMENT BY 1;&#13;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_AGE_GROUP_ID  START WITH 1 INCREMENT BY 1;&#13;&#10;CREATE SEQUENCE IF NOT EXISTS SEQ_COUNTRY_ID    START WITH 1 INCREMENT BY 1;&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Table: COUNTRIES&#13;&#10;-- ID_COUNTRY (PK), CODE (indexed + unique), NAME&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;CREATE TABLE COUNTRIES (&#13;&#10;                           ID_COUNTRY  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_COUNTRY_ID,&#13;&#10;                           CODE        VARCHAR(3)   NOT NULL,&#13;&#10;                           NAME        VARCHAR(100) NOT NULL,&#13;&#10;                           CONSTRAINT PK_COUNTRIES PRIMARY KEY (ID_COUNTRY),&#13;&#10;                           CONSTRAINT UK_COUNTRIES_CODE UNIQUE (CODE)&#13;&#10;);&#13;&#10;&#13;&#10;-- Seed countries&#13;&#10;INSERT INTO COUNTRIES (CODE, NAME) VALUES&#13;&#10;                                       ('AT','Austria'),&#13;&#10;                                       ('AU','Australia'),&#13;&#10;                                       ('BE','Belgium'),&#13;&#10;                                       ('CA','Canada'),&#13;&#10;                                       ('CH','Switzerland'),&#13;&#10;                                       ('CZ','Czech Republic'),&#13;&#10;                                       ('DE','Germany'),&#13;&#10;                                       ('DN','Denmark'),&#13;&#10;                                       ('ES','Spain'),&#13;&#10;                                       ('FI','Finland'),&#13;&#10;                                       ('FR','France'),&#13;&#10;                                       ('GB','United Kingdom'),&#13;&#10;                                       ('IE','Ireland'),&#13;&#10;                                       ('IT','Italy'),&#13;&#10;                                       ('LU','Luxembourg'),&#13;&#10;                                       ('NL','Netherlands'),&#13;&#10;                                       ('NO','Norway'),&#13;&#10;                                       ('NZ','New Zealand'),&#13;&#10;                                       ('PL','Poland'),&#13;&#10;                                       ('PT','Portugal'),&#13;&#10;                                       ('US','United States');&#13;&#10;&#13;&#10;-- Required index by CODE&#13;&#10;CREATE INDEX IF NOT EXISTS IX_COUNTRIES_CODE ON COUNTRIES (CODE);&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Table: THEMES (catalog of themes)&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;CREATE TABLE THEMES (&#13;&#10;                        ID_THEME  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_THEME_ID,&#13;&#10;                        NAME      VARCHAR(120) NOT NULL,&#13;&#10;                        CONSTRAINT PK_THEMES PRIMARY KEY (ID_THEME),&#13;&#10;                        CONSTRAINT UK_THEMES_NAME UNIQUE (NAME)&#13;&#10;);&#13;&#10;&#13;&#10;-- Seed themes&#13;&#10;INSERT INTO THEMES (NAME) VALUES&#13;&#10;                              ('Star Wars'),&#13;&#10;                              ('City'),&#13;&#10;                              ('Technic'),&#13;&#10;                              ('Friends'),&#13;&#10;                              ('Ninjago'),&#13;&#10;                              ('Harry Potter');&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Table: AGE_GROUPS (catalog of age ranges)&#13;&#10;-- CODE = dataset literal (e.g., '6-12', '12')&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;CREATE TABLE AGE_GROUPS (&#13;&#10;                            ID_AGE_GROUP  INTEGER      NOT NULL DEFAULT NEXT VALUE FOR SEQ_AGE_GROUP_ID,&#13;&#10;                            CODE          VARCHAR(16)  NOT NULL,&#13;&#10;                            CONSTRAINT PK_AGE_GROUP PRIMARY KEY (ID_AGE_GROUP),&#13;&#10;                            CONSTRAINT UK_AGE_GROUP_CODE UNIQUE (CODE)&#13;&#10;);&#13;&#10;&#13;&#10;-- Seed age groups&#13;&#10;INSERT INTO AGE_GROUPS (CODE) VALUES&#13;&#10;                                  ('6-12'),&#13;&#10;                                  ('12+'),&#13;&#10;                                  ('5-8'),&#13;&#10;                                  ('8-14');&#13;&#10;&#13;&#10;-- ---------------------------------------------------------------------&#13;&#10;-- Table: LEGO_SETS (normalized destination)&#13;&#10;-- * Surrogate PK ID_SET&#13;&#10;-- * FKs togt;= 0 AND STAR_RATING &lt;= 5)),&#13;&#10;                           CONSTRAINT FK_LEGOSET_THEME     FOREIGN KEY (THEME_ID)     REFERENCES THEMES(ID_THEME),&#13;&#10;                           CONSTRAINT FK_LEGOSET_AGEGROUP  FOREIGN KEY (AGE_GROUP_ID) REFERENCES AGE_GROUPS(ID_AGE_GROUP),&#13;&#10;                           CONSTRAINT FK_LEGOSET_COUNTRY   FOREIGN KEY (COUNTRY_ID)   REFERENCES COUNTRIES(ID_COUNTRY)&#13;&#10;);&#13;&#10;&#13;&#10;-- Suggested indexes for queries&#13;&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_THEME    ON LEGO_SETS (THEME_ID);&#13;&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_AGEGROUP ON LEGO_SETS (AGE_GROUP_ID);&#13;&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_COUNTRY  ON LEGO_SETS (COUNTRY_ID);&#13;&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_PRICE    ON LEGO_SETS (LIST_PRICE);&#13;&#10;CREATE INDEX IF NOT EXISTS IX_LEGOSET_PIECES   ON LEGO_SETS (PIECE_COUNT);&#13;&#10;&#13;&#10;-- Ejemplo: seed data para LEGO_SETS&#13;&#10;INSERT INTO LEGO_SETS (&#13;&#10;    PROD_ID, SET_NAME, PROD_DESC, REVIEW_DIFFICULTY, PIECE_COUNT, STAR_RATING, LIST_PRICE, THEME_ID, AGE_GROUP_ID, COUNTRY_ID&#13;&#10;) VALUES&#13;&#10;      (10001, 'Millennium Falcon', 'Star Wars spaceship', 'Medium', 1345, 4.8, 149.99, 1, 1, 1),&#13;&#10;      (10002, 'City Police Station', 'City theme police station', 'Easy', 742, 4.2, 79.99, 2, 3, 2),&#13;&#10;      (10003, 'Technic Bugatti', 'Technic supercar', 'Hard', 3599, 4.9, 349.99, 3, 2, 3);&#13;&#10;&#13;&#10;-- =====================================================================&#13;&#10;-- End of DDL&#13;&#10;-- =====================================================================" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/AppTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/AppTest.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertTrue;&#10;&#10;class AppTest {&#10;&#10;    @Test&#10;    void testAppRuns() {&#10;        assertTrue(true);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertTrue;&#10;&#10;class AppTest {&#10;&#10;    @Test&#10;    void testAppRuns() {&#10;        assertTrue(true);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>