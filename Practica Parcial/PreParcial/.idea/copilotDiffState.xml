<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/App.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/App.java" />
              <option name="originalContent" value="package miContenido;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.Repository.ThemeRepository;&#10;import miContenido.Service.CountryService;&#10;import miContenido.Service.LegoSetService;&#10;import miContenido.Service.ThemeService;&#10;import miContenido.model.Country;&#10;import miContenido.model.LegoSet;&#10;import miContenido.model.Theme;&#10;import miContenido.util.CsvParser;&#10;import miContenido.util.EntityManagerProvider;&#10;&#10;import java.net.URISyntaxException;&#10;import java.net.URL;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.math.BigDecimal;&#10;&#10;public class App {&#10;    public static void main(String[] args) throws URISyntaxException {&#10;        // 1️⃣ Obtener EntityManager&#10;        EntityManager em = EntityManagerProvider.getEntityManager();&#10;        System.out.println(&quot;✅ Conexión establecida correctamente.&quot;);&#10;&#10;        // 2️⃣ Parsear CSV de ejemplo&#10;        URL fileUrl = App.class.getResource(&quot;/sql/legosets_sample.csv&quot;);&#10;        if (fileUrl == null) {&#10;            System.err.println(&quot;No se encontró legosets_sample.csv en resources/sql&quot;);&#10;            em.close();&#10;            EntityManagerProvider.close();&#10;            return;&#10;        }&#10;        Path path = Paths.get(fileUrl.toURI());&#10;        CsvParser parser = new CsvParser();&#10;        List&lt;LegoSet&gt; legoSets = parser.parsearLegoSets(path);&#10;&#10;        // 3️⃣ Persistir los LegoSet&#10;        LegoSetService legoSetService = new LegoSetService();&#10;        legoSetService.agregarArrayList(legoSets);&#10;&#10;        // 4️⃣ Mostrar resumen&#10;        CountryService countryService = new CountryService();&#10;        List&lt;Country&gt; countries = countryService.getAllCountries();&#10;&#10;        System.out.println(&quot;Países (seed): &quot; + countries.size());&#10;        for (int i = 0; i &lt; Math.min(5, countries.size()); i++) {&#10;            System.out.println(&quot; - &quot; + countries.get(i).getCode() + &quot; &quot; + countries.get(i).getName());&#10;        }&#10;&#10;        List&lt;LegoSet&gt; saved = legoSetService.getAllLegoSets();&#10;        System.out.println(&quot;Sets cargados por CSV: &quot; + saved.size());&#10;        for (LegoSet ls : saved) {&#10;            System.out.println(&quot; * [&quot; + ls.getProdId() + &quot;] &quot; + ls.getSetName() + &quot; ($&quot; + ls.getListPrice() + &quot;)&quot;);&#10;        }&#10;&#10;        // ➕ Listar todos los sets con relaciones (JOIN FETCH)&#10;        List&lt;LegoSet&gt; withRelations = legoSetService.findAllWithRelations();&#10;        System.out.println(&quot;\nSets con detalles (Theme, AgeGroup, Country): &quot; + withRelations.size());&#10;        for (LegoSet ls : withRelations) {&#10;            String themeName = (ls.getTheme() != null ? ls.getTheme().getName() : &quot;-&quot;);&#10;            String ageCode = (ls.getAgeGroup() != null ? ls.getAgeGroup().getCode() : &quot;-&quot;);&#10;            String countryInfo = (ls.getCountry() != null ? (ls.getCountry().getCode() + &quot; &quot; + ls.getCountry().getName()) : &quot;-&quot;);&#10;            System.out.println(&quot; - [&quot; + ls.getProdId() + &quot;] &quot; + ls.getSetName() +&#10;                    &quot; | Theme=&quot; + themeName +&#10;                    &quot; | Age=&quot; + ageCode +&#10;                    &quot; | Country=&quot; + countryInfo +&#10;                    &quot; | $&quot; + ls.getListPrice());&#10;        }&#10;&#10;        // 7️⃣ Cerrar recursos&#10;        em.close();&#10;        EntityManagerProvider.close();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.Repository.ThemeRepository;&#10;import miContenido.Service.CountryService;&#10;import miContenido.Service.LegoSetService;&#10;import miContenido.Service.ThemeService;&#10;import miContenido.model.Country;&#10;import miContenido.model.LegoSet;&#10;import miContenido.model.Theme;&#10;import miContenido.util.CsvParser;&#10;import miContenido.util.EntityManagerProvider;&#10;&#10;import java.net.URISyntaxException;&#10;import java.net.URL;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.math.BigDecimal;&#10;&#10;public class App {&#10;    public static void main(String[] args) throws URISyntaxException {&#10;        // 1️⃣ Obtener EntityManager&#10;        EntityManager em = EntityManagerProvider.getEntityManager();&#10;        System.out.println(&quot;✅ Conexión establecida correctamente.&quot;);&#10;&#10;        // 2️⃣ Parsear CSV de ejemplo&#10;        URL fileUrl = App.class.getResource(&quot;/sql/legosets_sample.csv&quot;);&#10;        if (fileUrl == null) {&#10;            System.err.println(&quot;No se encontró legosets_sample.csv en resources/sql&quot;);&#10;            em.close();&#10;            EntityManagerProvider.close();&#10;            return;&#10;        }&#10;        Path path = Paths.get(fileUrl.toURI());&#10;        CsvParser parser = new CsvParser();&#10;        List&lt;LegoSet&gt; legoSets = parser.parsearLegoSets(path);&#10;&#10;        // 3️⃣ Persistir los LegoSet&#10;        LegoSetService legoSetService = new LegoSetService();&#10;        legoSetService.agregarArrayList(legoSets);&#10;&#10;        // 4️⃣ Mostrar resumen&#10;        CountryService countryService = new CountryService();&#10;        List&lt;Country&gt; countries = countryService.getAllCountries();&#10;&#10;        System.out.println(&quot;Países (seed): &quot; + countries.size());&#10;        for (int i = 0; i &lt; Math.min(5, countries.size()); i++) {&#10;            System.out.println(&quot; - &quot; + countries.get(i).getCode() + &quot; &quot; + countries.get(i).getName());&#10;        }&#10;&#10;        List&lt;LegoSet&gt; saved = legoSetService.getAllLegoSets();&#10;        System.out.println(&quot;Sets cargados por CSV: &quot; + saved.size());&#10;        for (LegoSet ls : saved) {&#10;            System.out.println(&quot; * [&quot; + ls.getProdId() + &quot;] &quot; + ls.getSetName() + &quot; ($&quot; + ls.getListPrice() + &quot;)&quot;);&#10;        }&#10;&#10;        // ➕ Listar todos los sets con relaciones (JOIN FETCH)&#10;        List&lt;LegoSet&gt; withRelations = legoSetService.findAllWithRelations();&#10;        System.out.println(&quot;\nSets con detalles (Theme, AgeGroup, Country): &quot; + withRelations.size());&#10;        for (LegoSet ls : withRelations) {&#10;            String themeName = (ls.getTheme() != null ? ls.getTheme().getName() : &quot;-&quot;);&#10;            String ageCode = (ls.getAgeGroup() != null ? ls.getAgeGroup().getCode() : &quot;-&quot;);&#10;            String countryInfo = (ls.getCountry() != null ? (ls.getCountry().getCode() + &quot; &quot; + ls.getCountry().getName()) : &quot;-&quot;);&#10;            System.out.println(&quot; - [&quot; + ls.getProdId() + &quot;] &quot; + ls.getSetName() +&#10;                    &quot; | Theme=&quot; + themeName +&#10;                    &quot; | Age=&quot; + ageCode +&#10;                    &quot; | Country=&quot; + countryInfo +&#10;                    &quot; | $&quot; + ls.getListPrice());&#10;        }&#10;&#10;        // 7️⃣ Cerrar recursos&#10;        em.close();&#10;        EntityManagerProvider.close();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Repository/BaseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Repository/BaseRepository.java" />
              <option name="originalContent" value="package miContenido.Repository;&#10;&#10;import jakarta.persistence.EntityManager;&#10;&#10;import java.util.List;&#10;&#10;public abstract class BaseRepository&lt;T, ID&gt; {&#10;    protected EntityManager em;&#10;    protected Class&lt;T&gt; entityClass;&#10;&#10;    public BaseRepository(EntityManager em, Class&lt;T&gt; entityClass) {&#10;        this.em = em;&#10;        this.entityClass = entityClass;&#10;    }&#10;&#10;    public List&lt;T&gt; findAll(){&#10;        String jpql = &quot;select t from &quot;+entityClass.getSimpleName()+&quot; t &quot;;&#10;        return em.createQuery(jpql, entityClass).getResultList();&#10;    }&#10;&#10;    public T findById(ID id){&#10;        return em.find(entityClass, id);&#10;    }&#10;&#10;&#10;    // Usamos merge para save y update, ya que si el entity no tiene id, lo inserta, y si tiene id, lo actualiza&#10;    public T save(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            T managed = em.merge(entity);&#10;            em.getTransaction().commit();&#10;            return managed;&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void update(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            em.merge(entity);&#10;            em.getTransaction().commit();&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    public void delete(T entity){&#10;        try{&#10;            em.getTransaction().begin();&#10;            // asegurar que la entidad esté gestionada antes de borrar&#10;            em.remove(em.contains(entity) ? entity : em.merge(entity));&#10;            em.getTransaction().commit();&#10;        }catch(Exception e){&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Repository;&#13;&#10;&#13;&#10;import jakarta.persistence.EntityManager;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public abstract class BaseRepository&lt;T, ID&gt; {&#13;&#10;    protected EntityManager em;&#13;&#10;    protected Class&lt;T&gt; entityClass;&#13;&#10;&#13;&#10;    public BaseRepository(EntityManager em, Class&lt;T&gt; entityClass) {&#13;&#10;        this.em = em;&#13;&#10;        this.entityClass = entityClass;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;T&gt; findAll(){&#13;&#10;        String jpql = &quot;select t from &quot;+entityClass.getSimpleName()+&quot; t &quot;;&#13;&#10;        return em.createQuery(jpql, entityClass).getResultList();&#13;&#10;    }&#13;&#10;&#13;&#10;    public T findById(ID id){&#13;&#10;        return em.find(entityClass, id);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    // Usamos merge para save y update, ya que si el entity no tiene id, lo inserta, y si tiene id, lo actualiza&#13;&#10;    public T save(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            T managed = em.merge(entity);&#13;&#10;            em.getTransaction().commit();&#13;&#10;            return managed;&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void update(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            em.merge(entity);&#13;&#10;            em.getTransaction().commit();&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void delete(T entity){&#13;&#10;        try{&#13;&#10;            em.getTransaction().begin();&#13;&#10;            // asegurar que la entidad esté gestionada antes de borrar&#13;&#10;            em.remove(em.contains(entity) ? entity : em.merge(entity));&#13;&#10;            em.getTransaction().commit();&#13;&#10;        }catch(Exception e){&#13;&#10;            if (em.getTransaction().isActive()) {&#13;&#10;                em.getTransaction().rollback();&#13;&#10;            }&#13;&#10;            throw new RuntimeException(e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Repository/CountryRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Repository/CountryRepository.java" />
              <option name="originalContent" value="package miContenido.Repository;&#10;&#10;&#10;import jakarta.persistence.NoResultException;&#10;import miContenido.model.Country;&#10;import miContenido.util.EntityManagerProvider;&#10;&#10;public class CountryRepository extends BaseRepository&lt;Country, Integer&gt; {&#10;    public CountryRepository() {&#10;        super(EntityManagerProvider.getEntityManager(), Country.class);&#10;    }&#10;&#10;    public Country findByCode(String code) {&#10;        String jpql = &quot;SELECT c FROM Country c WHERE c.code = :code&quot;;&#10;        try {&#10;            return em.createQuery(jpql, Country.class)&#10;                    .setParameter(&quot;code&quot;, code)&#10;                    .getSingleResult();&#10;        } catch (NoResultException e) {&#10;            return null;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Repository;&#13;&#10;&#13;&#10;&#13;&#10;import jakarta.persistence.NoResultException;&#13;&#10;import miContenido.model.Country;&#13;&#10;import miContenido.util.EntityManagerProvider;&#13;&#10;&#13;&#10;public class CountryRepository extends BaseRepository&lt;Country, Integer&gt; {&#13;&#10;    public CountryRepository() {&#13;&#10;        super(EntityManagerProvider.getEntityManager(), Country.class);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Country findByCode(String code) {&#13;&#10;        String jpql = &quot;SELECT c FROM Country c WHERE c.code = :code&quot;;&#13;&#10;        try {&#13;&#10;            return em.createQuery(jpql, Country.class)&#13;&#10;                    .setParameter(&quot;code&quot;, code)&#13;&#10;                    .getSingleResult();&#13;&#10;        } catch (NoResultException e) {&#13;&#10;            return null;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/AgeGroupService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/AgeGroupService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.AgeGroupRepository;&#10;import miContenido.model.AgeGroup;&#10;&#10;public class AgeGroupService {&#10;    private final AgeGroupRepository ageGroupRepository;&#10;&#10;    public AgeGroupService() {&#10;        this.ageGroupRepository = new AgeGroupRepository();&#10;    }&#10;&#10;    public java.util.List&lt;miContenido.model.AgeGroup&gt; getAllAgeGroups() {&#10;        return ageGroupRepository.findAll();&#10;    }&#10;&#10;    public miContenido.model.AgeGroup getAgeGroupById(Integer id) {&#10;        return ageGroupRepository.findById(id);&#10;    }&#10;&#10;    public void saveAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.save(ageGroup);&#10;    }&#10;&#10;    public void updateAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.update(ageGroup);&#10;    }&#10;&#10;    public void deleteAgeGroup(miContenido.model.AgeGroup ageGroup) {&#10;        ageGroupRepository.delete(ageGroup);&#10;    }&#10;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#10;    public void agregarArrayList(java.util.List&lt;miContenido.model.AgeGroup&gt; ageGroups) {&#10;        for (miContenido.model.AgeGroup ageGroup : ageGroups) {&#10;            ageGroupRepository.save(ageGroup);&#10;        }&#10;    }&#10;&#10;    public AgeGroup findOrCreateByCode(String ageCode) {&#10;        // Buscar si existe un age group con ese código&#10;        java.util.List&lt;miContenido.model.AgeGroup&gt; existentes = ageGroupRepository.findAll();&#10;        for (miContenido.model.AgeGroup ageGroup : existentes) {&#10;            if (ageGroup.getCode().equalsIgnoreCase(ageCode)) {&#10;                return ageGroup;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo (recuperando el managed) y lo retorno&#10;        miContenido.model.AgeGroup nuevo = new miContenido.model.AgeGroup();&#10;        nuevo.setCode(ageCode);&#10;        return ageGroupRepository.save(nuevo);&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Service;&#13;&#10;&#13;&#10;import miContenido.Repository.AgeGroupRepository;&#13;&#10;import miContenido.model.AgeGroup;&#13;&#10;&#13;&#10;public class AgeGroupService {&#13;&#10;    private final AgeGroupRepository ageGroupRepository;&#13;&#10;&#13;&#10;    public AgeGroupService() {&#13;&#10;        this.ageGroupRepository = new AgeGroupRepository();&#13;&#10;    }&#13;&#10;&#13;&#10;    public java.util.List&lt;miContenido.model.AgeGroup&gt; getAllAgeGroups() {&#13;&#10;        return ageGroupRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    public miContenido.model.AgeGroup getAgeGroupById(Integer id) {&#13;&#10;        return ageGroupRepository.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void saveAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.save(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.update(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteAgeGroup(miContenido.model.AgeGroup ageGroup) {&#13;&#10;        ageGroupRepository.delete(ageGroup);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#13;&#10;    public void agregarArrayList(java.util.List&lt;miContenido.model.AgeGroup&gt; ageGroups) {&#13;&#10;        for (miContenido.model.AgeGroup ageGroup : ageGroups) {&#13;&#10;            ageGroupRepository.save(ageGroup);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public AgeGroup findOrCreateByCode(String ageCode) {&#13;&#10;        // Buscar si existe un age group con ese código&#13;&#10;        java.util.List&lt;miContenido.model.AgeGroup&gt; existentes = ageGroupRepository.findAll();&#13;&#10;        for (miContenido.model.AgeGroup ageGroup : existentes) {&#13;&#10;            if (ageGroup.getCode().equalsIgnoreCase(ageCode)) {&#13;&#10;                return ageGroup;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // Si no existe, lo creo, lo guardo (recuperando el managed) y lo retorno&#13;&#10;        miContenido.model.AgeGroup nuevo = new miContenido.model.AgeGroup();&#13;&#10;        nuevo.setCode(ageCode);&#13;&#10;        return ageGroupRepository.save(nuevo);&#13;&#10;    }&#13;&#10;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/CountryService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/CountryService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.model.Country;&#10;&#10;import java.util.List;&#10;&#10;public class CountryService {&#10;    private final CountryRepository countryRepository;&#10;    public CountryService() {&#10;        this.countryRepository = new CountryRepository();&#10;    }&#10;    public List&lt;Country&gt; getAllCountries() {&#10;        return countryRepository.findAll();&#10;    }&#10;    public Country getCountryById(Integer id) {&#10;        return countryRepository.findById(id);&#10;    }&#10;    public void saveCountry(Country country) {&#10;        countryRepository.save(country);&#10;    }&#10;    public void updateCountry(Country country) {&#10;        countryRepository.update(country);&#10;    }&#10;    public void deleteCountry(Country country) {&#10;        countryRepository.delete(country);&#10;    }&#10;&#10;    public Integer getThemeById(Integer id) {&#10;        Country country = countryRepository.findById(id);&#10;        return country != null ? country.getIdCountry() : null;&#10;    }&#10;&#10;&#10;    // ✅ NUEVO: buscar por código (COUNTRIES.CODE)&#10;    public Country getCountryByCode(String code) {&#10;        return countryRepository.findByCode(code);&#10;    }&#10;&#10;    // ✅ NUEVO: find-or-create por código (evita violar NOT NULL/UNIQUE de CODE)&#10;    public Country findOrCreateByCode(String code) {&#10;        Country existente = countryRepository.findByCode(code);&#10;        if (existente != null) return existente;&#10;        Country nuevo = new Country();&#10;        nuevo.setCode(code);&#10;        // Si no tenemos nombre disponible, guardamos el código como nombre temporalmente.&#10;        nuevo.setName(code);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;&#10;    // Método previo por nombre (se mantiene por compatibilidad)&#10;    public void agregarArrayList(List&lt;Country&gt; countries) {&#10;        for (Country country : countries) {&#10;            countryRepository.save(country);&#10;        }&#10;    }&#10;    public Country findOrCreateByName(String countryName) {&#10;        // Buscar si existe un country con ese nombre&#10;        List&lt;Country&gt; existentes = countryRepository.findAll();&#10;        for (Country country : existentes) {&#10;            if (country.getName().equalsIgnoreCase(countryName)) {&#10;                return country;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo y retorno la instancia gestionada&#10;        Country nuevo = new Country();&#10;        nuevo.setName(countryName);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.CountryRepository;&#10;import miContenido.model.Country;&#10;&#10;import java.util.List;&#10;&#10;public class CountryService {&#10;    private final CountryRepository countryRepository;&#10;    public CountryService() {&#10;        this.countryRepository = new CountryRepository();&#10;    }&#10;    public List&lt;Country&gt; getAllCountries() {&#10;        return countryRepository.findAll();&#10;    }&#10;    public Country getCountryById(Integer id) {&#10;        return countryRepository.findById(id);&#10;    }&#10;    public void saveCountry(Country country) {&#10;        countryRepository.save(country);&#10;    }&#10;    public void updateCountry(Country country) {&#10;        countryRepository.update(country);&#10;    }&#10;    public void deleteCountry(Country country) {&#10;        countryRepository.delete(country);&#10;    }&#10;&#10;    public Integer getThemeById(Integer id) {&#10;        Country country = countryRepository.findById(id);&#10;        return country != null ? country.getIdCountry() : null;&#10;    }&#10;&#10;&#10;    // ✅ NUEVO: buscar por código (COUNTRIES.CODE)&#10;    public Country getCountryByCode(String code) {&#10;        return countryRepository.findByCode(code);&#10;    }&#10;&#10;    // ✅ NUEVO: find-or-create por código (evita violar NOT NULL/UNIQUE de CODE)&#10;    public Country findOrCreateByCode(String code) {&#10;        Country existente = countryRepository.findByCode(code);&#10;        if (existente != null) return existente;&#10;        Country nuevo = new Country();&#10;        nuevo.setCode(code);&#10;        // Si no tenemos nombre disponible, guardamos el código como nombre temporalmente.&#10;        nuevo.setName(code);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;&#10;    // Método previo por nombre (se mantiene por compatibilidad)&#10;    public void agregarArrayList(List&lt;Country&gt; countries) {&#10;        for (Country country : countries) {&#10;            countryRepository.save(country);&#10;        }&#10;    }&#10;    public Country findOrCreateByName(String countryName) {&#10;        // Buscar si existe un country con ese nombre&#10;        List&lt;Country&gt; existentes = countryRepository.findAll();&#10;        for (Country country : existentes) {&#10;            if (country.getName().equalsIgnoreCase(countryName)) {&#10;                return country;&#10;            }&#10;        }&#10;        // Si no existe, lo creo, lo guardo y retorno la instancia gestionada&#10;        Country nuevo = new Country();&#10;        nuevo.setName(countryName);&#10;        return countryRepository.save(nuevo);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/Service/ThemeService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/Service/ThemeService.java" />
              <option name="originalContent" value="package miContenido.Service;&#10;&#10;import miContenido.Repository.ThemeRepository;&#10;import miContenido.model.Theme;&#10;import java.util.List;&#10;&#10;public class ThemeService {&#10;    private final ThemeRepository themeRepository;&#10;&#10;    public ThemeService() {&#10;        this.themeRepository = new ThemeRepository();&#10;    }&#10;&#10;    public List&lt;Theme&gt; getAllThemes() {&#10;        return themeRepository.findAll();&#10;    }&#10;&#10;    public Theme getThemeById(Integer id) {&#10;        return themeRepository.findById(id);&#10;    }&#10;&#10;    public void saveTheme(Theme theme) {&#10;        themeRepository.save(theme);&#10;    }&#10;&#10;    public void updateTheme(Theme theme) {&#10;        themeRepository.update(theme);&#10;    }&#10;&#10;    public void deleteTheme(Theme theme) {&#10;        themeRepository.delete(theme);&#10;    }&#10;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#10;    public void agregarArrayList(List&lt;Theme&gt; themes) {&#10;        for (Theme theme : themes) {&#10;            themeRepository.save(theme);&#10;        }&#10;    }&#10;&#10;    public Theme findOrCreateByName(String themeName) {&#10;        // Buscar si existe un theme con ese nombre&#10;        List&lt;Theme&gt; existentes = themeRepository.findAll();&#10;        for (Theme theme : existentes) {&#10;            if (theme.getName().equalsIgnoreCase(themeName)) {&#10;                return theme;&#10;            }&#10;        }&#10;        // Si no existe, lo creo y retorno la entidad gestionada por merge (con ID)&#10;        Theme nuevo = new Theme();&#10;        nuevo.setName(themeName);&#10;        return themeRepository.save(nuevo);&#10;    }&#10;}" />
              <option name="updatedContent" value="package miContenido.Service;&#13;&#10;&#13;&#10;import miContenido.Repository.ThemeRepository;&#13;&#10;import miContenido.model.Theme;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class ThemeService {&#13;&#10;    private final ThemeRepository themeRepository;&#13;&#10;&#13;&#10;    public ThemeService() {&#13;&#10;        this.themeRepository = new ThemeRepository();&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;Theme&gt; getAllThemes() {&#13;&#10;        return themeRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    public Theme getThemeById(Integer id) {&#13;&#10;        return themeRepository.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void saveTheme(Theme theme) {&#13;&#10;        themeRepository.save(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void updateTheme(Theme theme) {&#13;&#10;        themeRepository.update(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteTheme(Theme theme) {&#13;&#10;        themeRepository.delete(theme);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ✅ NUEVO MÉTODO PARA GUARDAR UNA LISTA ENTERA&#13;&#10;    public void agregarArrayList(List&lt;Theme&gt; themes) {&#13;&#10;        for (Theme theme : themes) {&#13;&#10;            themeRepository.save(theme);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Theme findOrCreateByName(String themeName) {&#13;&#10;        // Buscar si existe un theme con ese nombre&#13;&#10;        List&lt;Theme&gt; existentes = themeRepository.findAll();&#13;&#10;        for (Theme theme : existentes) {&#13;&#10;            if (theme.getName().equalsIgnoreCase(themeName)) {&#13;&#10;                return theme;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        // Si no existe, lo creo y retorno la entidad gestionada por merge (con ID)&#13;&#10;        Theme nuevo = new Theme();&#13;&#10;        nuevo.setName(themeName);&#13;&#10;        return themeRepository.save(nuevo);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/miContenido/model/LegoSet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/miContenido/model/LegoSet.java" />
              <option name="originalContent" value="package miContenido.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.math.BigDecimal;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@Table(name = &quot;LEGO_SETS&quot;)&#10;public class LegoSet {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;lego_set_seq&quot;)&#10;    @SequenceGenerator(name = &quot;lego_set_seq&quot;, sequenceName = &quot;SEQ_LEGO_SET_ID&quot;, allocationSize = 1)&#10;    @Column(name = &quot;ID_SET&quot;)&#10;    private Integer idSet;&#10;&#10;    @Column(name = &quot;PROD_ID&quot;, nullable = false)&#10;    private Integer prodId;&#10;&#10;    @Column(name = &quot;SET_NAME&quot;, nullable = false, length = 200)&#10;    private String setName;&#10;&#10;    @Column(name = &quot;PROD_DESC&quot;, length = 2048)&#10;    private String prodDesc;&#10;&#10;    @Column(name = &quot;REVIEW_DIFFICULTY&quot;, length = 32)&#10;    private String reviewDifficulty;&#10;&#10;    @Column(name = &quot;PIECE_COUNT&quot;)&#10;    private Integer pieceCount;&#10;&#10;    @Column(name = &quot;STAR_RATING&quot;, precision = 3, scale = 1)&#10;    private BigDecimal starRating;&#10;&#10;    @Column(name = &quot;LIST_PRICE&quot;, precision = 10, scale = 2)&#10;    private BigDecimal listPrice;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;THEME_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Theme theme;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;AGE_GROUP_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private AgeGroup ageGroup;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;COUNTRY_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Country country;&#10;&#10;&#10;&#10;    // Getters and setters...&#10;}&#10;" />
              <option name="updatedContent" value="package miContenido.model;&#10;&#10;import jakarta.persistence.*;&#10;&#10;import java.math.BigDecimal;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@Table(name = &quot;LEGO_SETS&quot;)&#10;public class LegoSet {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = &quot;lego_set_seq&quot;)&#10;    @SequenceGenerator(name = &quot;lego_set_seq&quot;, sequenceName = &quot;SEQ_LEGO_SET_ID&quot;, allocationSize = 1)&#10;    @Column(name = &quot;ID_SET&quot;)&#10;    private Integer idSet;&#10;&#10;    @Column(name = &quot;PROD_ID&quot;, nullable = false)&#10;    private Integer prodId;&#10;&#10;    @Column(name = &quot;SET_NAME&quot;, nullable = false, length = 200)&#10;    private String setName;&#10;&#10;    @Column(name = &quot;PROD_DESC&quot;, length = 2048)&#10;    private String prodDesc;&#10;&#10;    @Column(name = &quot;REVIEW_DIFFICULTY&quot;, length = 32)&#10;    private String reviewDifficulty;&#10;&#10;    @Column(name = &quot;PIECE_COUNT&quot;)&#10;    private Integer pieceCount;&#10;&#10;    @Column(name = &quot;STAR_RATING&quot;, precision = 3, scale = 1)&#10;    private BigDecimal starRating;&#10;&#10;    @Column(name = &quot;LIST_PRICE&quot;, precision = 10, scale = 2)&#10;    private BigDecimal listPrice;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;THEME_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Theme theme;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;AGE_GROUP_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private AgeGroup ageGroup;&#10;&#10;    @ManyToOne(optional = false, fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;COUNTRY_ID&quot;)&#10;    @ToString.Exclude&#10;    @EqualsAndHashCode.Exclude&#10;    private Country country;&#10;&#10;&#10;&#10;    // Getters and setters...&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/org/example/AppTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/org/example/AppTest.java" />
              <option name="originalContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertTrue;&#10;&#10;class AppTest {&#10;&#10;    @Test&#10;    void testAppRuns() {&#10;        assertTrue(true);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.example;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.assertTrue;&#10;&#10;class AppTest {&#10;&#10;    @Test&#10;    void testAppRuns() {&#10;        assertTrue(true);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>